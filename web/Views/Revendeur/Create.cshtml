@model web.Models.RevendeurModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_BackOffice.cshtml";
}

@section CSS
{
    
    <link href="~/Content/css/fileinput.min.css" rel="stylesheet" />
<style>
     /* Always set the map height explicitly to define the size of the div
    * element that contains the map. */
     #map {
         height: 500px;
     }
     /* Optional: Makes the sample page fill the window. */
     html, body {
         height: 90%;
         margin: 0;
         padding: 0;
     }
</style>

}
<h2>Create</h2>

    @using (Html.BeginForm("Create","Revendeur",FormMethod.Post,new {enctype= "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>RevendeurModel</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.tel, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.tel, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.tel, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                </div>
            </div>
            
            <div class="form-group">
                
                    <label class="control-label col-md-2">Add coordinates</label>
                
               
                <div class="col-md-10">
                    <button id="openModal" type="button" class=" col-md-4 col-md-offset-3 center  btn btn-primary">click to add coordinates</button>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                

            </div>
            
            <div class="form-group">
                @Html.LabelFor(model => model.ImageName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                  <input id="file" type="file" name="file" multiple="true"/>
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                

            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
  

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Modal title</h4>
            </div>
            <div class="modal-body text-center">
                <div id="map"></div>
               
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    
    <script src="~/Content/js/fileinput.min.js"></script>
    <script>
        $('#file').fileinput();

    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAYpzzvQUJUIRfMb5_Gqplp4ZF_5dPJ0hg&callback=initMap">
    </script>
    <script>


        $(document).ready(function() {
            $('#openModal').on('click',
                function () {

                    $('#myModal').modal('toggle');
                });

            $('#myModal').on('shown.bs.modal', function () {
                google.maps.event.trigger(map, "resize");
            });
        });
        function initMap() {
            var mapOptions = {
                zoom: 6,
                center: new google.maps.LatLng(36.8065, 10.1815),
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById('map'), mapOptions);

             google.maps.event.addListener(map, 'click', function(event) {
                 var marker = new google.maps.Marker({
                     position: event.LatLng,
                     map: map
                 });

                 map.setCenter(event.LatLng);
             });





        }

        
        


        function loadData() {

        }
    </script>
}
